{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "76f48819",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:57.212859Z",
     "iopub.status.busy": "2024-04-13T15:53:57.212370Z",
     "iopub.status.idle": "2024-04-13T15:53:58.284404Z",
     "shell.execute_reply": "2024-04-13T15:53:58.282598Z"
    },
    "papermill": {
     "duration": 1.083939,
     "end_time": "2024-04-13T15:53:58.287214",
     "exception": false,
     "start_time": "2024-04-13T15:53:57.203275",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/pokemon/report_Pokemon.pdf\n",
      "/kaggle/input/pokemon/pokemon_alopez247.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9e4b16dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.303599Z",
     "iopub.status.busy": "2024-04-13T15:53:58.301972Z",
     "iopub.status.idle": "2024-04-13T15:53:58.334011Z",
     "shell.execute_reply": "2024-04-13T15:53:58.332520Z"
    },
    "papermill": {
     "duration": 0.043775,
     "end_time": "2024-04-13T15:53:58.337528",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.293753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/pokemon/pokemon_alopez247.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1a571722",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.352707Z",
     "iopub.status.busy": "2024-04-13T15:53:58.352253Z",
     "iopub.status.idle": "2024-04-13T15:53:58.367194Z",
     "shell.execute_reply": "2024-04-13T15:53:58.365766Z"
    },
    "papermill": {
     "duration": 0.025535,
     "end_time": "2024-04-13T15:53:58.369781",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.344246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns_to_drop = ['Speed','Generation','isLegendary', 'Color', 'hasGender', 'Pr_Male', 'hasMegaEvolution','Height_m','Weight_kg','Catch_Rate','Body_Style']\n",
    "df.drop(axis=1, columns=columns_to_drop, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cc97017a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.384818Z",
     "iopub.status.busy": "2024-04-13T15:53:58.383356Z",
     "iopub.status.idle": "2024-04-13T15:53:58.431428Z",
     "shell.execute_reply": "2024-04-13T15:53:58.429991Z"
    },
    "papermill": {
     "duration": 0.058629,
     "end_time": "2024-04-13T15:53:58.434285",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.375656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number</th>\n",
       "      <th>Total</th>\n",
       "      <th>HP</th>\n",
       "      <th>Attack</th>\n",
       "      <th>Defense</th>\n",
       "      <th>Sp_Atk</th>\n",
       "      <th>Sp_Def</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>721.00000</td>\n",
       "      <td>721.000000</td>\n",
       "      <td>721.000000</td>\n",
       "      <td>721.000000</td>\n",
       "      <td>721.000000</td>\n",
       "      <td>721.000000</td>\n",
       "      <td>721.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>361.00000</td>\n",
       "      <td>417.945908</td>\n",
       "      <td>68.380028</td>\n",
       "      <td>75.013870</td>\n",
       "      <td>70.808599</td>\n",
       "      <td>68.737864</td>\n",
       "      <td>69.291262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>208.27906</td>\n",
       "      <td>109.663671</td>\n",
       "      <td>25.848272</td>\n",
       "      <td>28.984475</td>\n",
       "      <td>29.296558</td>\n",
       "      <td>28.788005</td>\n",
       "      <td>27.015860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.00000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>181.00000</td>\n",
       "      <td>320.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>53.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>361.00000</td>\n",
       "      <td>424.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>74.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>65.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>541.00000</td>\n",
       "      <td>499.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>85.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>85.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>721.00000</td>\n",
       "      <td>720.000000</td>\n",
       "      <td>255.000000</td>\n",
       "      <td>165.000000</td>\n",
       "      <td>230.000000</td>\n",
       "      <td>154.000000</td>\n",
       "      <td>230.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Number       Total          HP      Attack     Defense      Sp_Atk  \\\n",
       "count  721.00000  721.000000  721.000000  721.000000  721.000000  721.000000   \n",
       "mean   361.00000  417.945908   68.380028   75.013870   70.808599   68.737864   \n",
       "std    208.27906  109.663671   25.848272   28.984475   29.296558   28.788005   \n",
       "min      1.00000  180.000000    1.000000    5.000000    5.000000   10.000000   \n",
       "25%    181.00000  320.000000   50.000000   53.000000   50.000000   45.000000   \n",
       "50%    361.00000  424.000000   65.000000   74.000000   65.000000   65.000000   \n",
       "75%    541.00000  499.000000   80.000000   95.000000   85.000000   90.000000   \n",
       "max    721.00000  720.000000  255.000000  165.000000  230.000000  154.000000   \n",
       "\n",
       "           Sp_Def  \n",
       "count  721.000000  \n",
       "mean    69.291262  \n",
       "std     27.015860  \n",
       "min     20.000000  \n",
       "25%     50.000000  \n",
       "50%     65.000000  \n",
       "75%     85.000000  \n",
       "max    230.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8f0425dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.449330Z",
     "iopub.status.busy": "2024-04-13T15:53:58.448868Z",
     "iopub.status.idle": "2024-04-13T15:53:58.474053Z",
     "shell.execute_reply": "2024-04-13T15:53:58.471710Z"
    },
    "papermill": {
     "duration": 0.037176,
     "end_time": "2024-04-13T15:53:58.478014",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.440838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 721 entries, 0 to 720\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype \n",
      "---  ------       --------------  ----- \n",
      " 0   Number       721 non-null    int64 \n",
      " 1   Name         721 non-null    object\n",
      " 2   Type_1       721 non-null    object\n",
      " 3   Type_2       350 non-null    object\n",
      " 4   Total        721 non-null    int64 \n",
      " 5   HP           721 non-null    int64 \n",
      " 6   Attack       721 non-null    int64 \n",
      " 7   Defense      721 non-null    int64 \n",
      " 8   Sp_Atk       721 non-null    int64 \n",
      " 9   Sp_Def       721 non-null    int64 \n",
      " 10  Egg_Group_1  721 non-null    object\n",
      " 11  Egg_Group_2  191 non-null    object\n",
      "dtypes: int64(7), object(5)\n",
      "memory usage: 67.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4cb3f779",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.495581Z",
     "iopub.status.busy": "2024-04-13T15:53:58.494647Z",
     "iopub.status.idle": "2024-04-13T15:53:58.507592Z",
     "shell.execute_reply": "2024-04-13T15:53:58.506190Z"
    },
    "papermill": {
     "duration": 0.024164,
     "end_time": "2024-04-13T15:53:58.510604",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.486440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Number           0\n",
       "Name             0\n",
       "Type_1           0\n",
       "Type_2         371\n",
       "Total            0\n",
       "HP               0\n",
       "Attack           0\n",
       "Defense          0\n",
       "Sp_Atk           0\n",
       "Sp_Def           0\n",
       "Egg_Group_1      0\n",
       "Egg_Group_2    530\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5aff3e99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.531438Z",
     "iopub.status.busy": "2024-04-13T15:53:58.530649Z",
     "iopub.status.idle": "2024-04-13T15:53:58.539506Z",
     "shell.execute_reply": "2024-04-13T15:53:58.537952Z"
    },
    "papermill": {
     "duration": 0.020195,
     "end_time": "2024-04-13T15:53:58.542270",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.522075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "68.38002773925103"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hp_mean = df['HP'].mean()\n",
    "hp_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "df9dbd7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.560857Z",
     "iopub.status.busy": "2024-04-13T15:53:58.559066Z",
     "iopub.status.idle": "2024-04-13T15:53:58.571489Z",
     "shell.execute_reply": "2024-04-13T15:53:58.568547Z"
    },
    "papermill": {
     "duration": 0.026092,
     "end_time": "2024-04-13T15:53:58.576156",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.550064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "75.01386962552012"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "attack_mean = df['Attack'].mean()\n",
    "attack_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ba68e89d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.593608Z",
     "iopub.status.busy": "2024-04-13T15:53:58.592254Z",
     "iopub.status.idle": "2024-04-13T15:53:58.603282Z",
     "shell.execute_reply": "2024-04-13T15:53:58.601591Z"
    },
    "papermill": {
     "duration": 0.022801,
     "end_time": "2024-04-13T15:53:58.606274",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.583473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "70.80859916782246"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "defense_mean = df['Defense'].mean()\n",
    "defense_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c7557a9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.625008Z",
     "iopub.status.busy": "2024-04-13T15:53:58.624098Z",
     "iopub.status.idle": "2024-04-13T15:53:58.646335Z",
     "shell.execute_reply": "2024-04-13T15:53:58.645050Z"
    },
    "papermill": {
     "duration": 0.034807,
     "end_time": "2024-04-13T15:53:58.649166",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.614359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "417.94590846047157"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_mean = df['Total'].mean()\n",
    "total_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c7a9d721",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.666247Z",
     "iopub.status.busy": "2024-04-13T15:53:58.665805Z",
     "iopub.status.idle": "2024-04-13T15:53:58.692071Z",
     "shell.execute_reply": "2024-04-13T15:53:58.690895Z"
    },
    "papermill": {
     "duration": 0.037992,
     "end_time": "2024-04-13T15:53:58.694746",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.656754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number</th>\n",
       "      <th>Name</th>\n",
       "      <th>Type_1</th>\n",
       "      <th>Type_2</th>\n",
       "      <th>Total</th>\n",
       "      <th>HP</th>\n",
       "      <th>Attack</th>\n",
       "      <th>Defense</th>\n",
       "      <th>Sp_Atk</th>\n",
       "      <th>Sp_Def</th>\n",
       "      <th>Egg_Group_1</th>\n",
       "      <th>Egg_Group_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Venusaur</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Poison</td>\n",
       "      <td>525</td>\n",
       "      <td>80</td>\n",
       "      <td>82</td>\n",
       "      <td>83</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Grass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Charizard</td>\n",
       "      <td>Fire</td>\n",
       "      <td>Flying</td>\n",
       "      <td>534</td>\n",
       "      <td>78</td>\n",
       "      <td>84</td>\n",
       "      <td>78</td>\n",
       "      <td>109</td>\n",
       "      <td>85</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Dragon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>Blastoise</td>\n",
       "      <td>Water</td>\n",
       "      <td>NaN</td>\n",
       "      <td>530</td>\n",
       "      <td>79</td>\n",
       "      <td>83</td>\n",
       "      <td>100</td>\n",
       "      <td>85</td>\n",
       "      <td>105</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Water_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>Pidgeot</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Flying</td>\n",
       "      <td>479</td>\n",
       "      <td>83</td>\n",
       "      <td>80</td>\n",
       "      <td>75</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>Flying</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>Sandslash</td>\n",
       "      <td>Ground</td>\n",
       "      <td>NaN</td>\n",
       "      <td>450</td>\n",
       "      <td>75</td>\n",
       "      <td>100</td>\n",
       "      <td>110</td>\n",
       "      <td>45</td>\n",
       "      <td>55</td>\n",
       "      <td>Field</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>712</th>\n",
       "      <td>713</td>\n",
       "      <td>Avalugg</td>\n",
       "      <td>Ice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>514</td>\n",
       "      <td>95</td>\n",
       "      <td>117</td>\n",
       "      <td>184</td>\n",
       "      <td>44</td>\n",
       "      <td>46</td>\n",
       "      <td>Monster</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>715</th>\n",
       "      <td>716</td>\n",
       "      <td>Xerneas</td>\n",
       "      <td>Fairy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>680</td>\n",
       "      <td>126</td>\n",
       "      <td>131</td>\n",
       "      <td>95</td>\n",
       "      <td>131</td>\n",
       "      <td>98</td>\n",
       "      <td>Undiscovered</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>716</th>\n",
       "      <td>717</td>\n",
       "      <td>Yveltal</td>\n",
       "      <td>Dark</td>\n",
       "      <td>Flying</td>\n",
       "      <td>680</td>\n",
       "      <td>126</td>\n",
       "      <td>131</td>\n",
       "      <td>95</td>\n",
       "      <td>131</td>\n",
       "      <td>98</td>\n",
       "      <td>Undiscovered</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>717</th>\n",
       "      <td>718</td>\n",
       "      <td>Zygarde</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>Ground</td>\n",
       "      <td>600</td>\n",
       "      <td>108</td>\n",
       "      <td>100</td>\n",
       "      <td>121</td>\n",
       "      <td>81</td>\n",
       "      <td>95</td>\n",
       "      <td>Undiscovered</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>720</th>\n",
       "      <td>721</td>\n",
       "      <td>Volcanion</td>\n",
       "      <td>Fire</td>\n",
       "      <td>Water</td>\n",
       "      <td>600</td>\n",
       "      <td>80</td>\n",
       "      <td>110</td>\n",
       "      <td>120</td>\n",
       "      <td>130</td>\n",
       "      <td>90</td>\n",
       "      <td>Undiscovered</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>155 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Number       Name  Type_1  Type_2  Total   HP  Attack  Defense  Sp_Atk  \\\n",
       "2         3   Venusaur   Grass  Poison    525   80      82       83     100   \n",
       "5         6  Charizard    Fire  Flying    534   78      84       78     109   \n",
       "8         9  Blastoise   Water     NaN    530   79      83      100      85   \n",
       "17       18    Pidgeot  Normal  Flying    479   83      80       75      70   \n",
       "27       28  Sandslash  Ground     NaN    450   75     100      110      45   \n",
       "..      ...        ...     ...     ...    ...  ...     ...      ...     ...   \n",
       "712     713    Avalugg     Ice     NaN    514   95     117      184      44   \n",
       "715     716    Xerneas   Fairy     NaN    680  126     131       95     131   \n",
       "716     717    Yveltal    Dark  Flying    680  126     131       95     131   \n",
       "717     718    Zygarde  Dragon  Ground    600  108     100      121      81   \n",
       "720     721  Volcanion    Fire   Water    600   80     110      120     130   \n",
       "\n",
       "     Sp_Def   Egg_Group_1 Egg_Group_2  \n",
       "2       100       Monster       Grass  \n",
       "5        85       Monster      Dragon  \n",
       "8       105       Monster     Water_1  \n",
       "17       70        Flying         NaN  \n",
       "27       55         Field         NaN  \n",
       "..      ...           ...         ...  \n",
       "712      46       Monster         NaN  \n",
       "715      98  Undiscovered         NaN  \n",
       "716      98  Undiscovered         NaN  \n",
       "717      95  Undiscovered         NaN  \n",
       "720      90  Undiscovered         NaN  \n",
       "\n",
       "[155 rows x 12 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "above_mean = df[(df['HP'] > hp_mean) & (df['Attack'] > attack_mean) & (df['Defense'] > defense_mean)]\n",
    "above_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3a421a9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.713267Z",
     "iopub.status.busy": "2024-04-13T15:53:58.712505Z",
     "iopub.status.idle": "2024-04-13T15:53:58.722860Z",
     "shell.execute_reply": "2024-04-13T15:53:58.721626Z"
    },
    "papermill": {
     "duration": 0.022096,
     "end_time": "2024-04-13T15:53:58.725365",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.703269",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Total        720\n",
       "Name     Zygarde\n",
       "dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_total_above_mean = above_mean[['Total','Name']].max()\n",
    "max_total_above_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "754fe3db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.743608Z",
     "iopub.status.busy": "2024-04-13T15:53:58.743210Z",
     "iopub.status.idle": "2024-04-13T15:53:58.764522Z",
     "shell.execute_reply": "2024-04-13T15:53:58.763375Z"
    },
    "papermill": {
     "duration": 0.033966,
     "end_time": "2024-04-13T15:53:58.767090",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.733124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number</th>\n",
       "      <th>Name</th>\n",
       "      <th>Type_1</th>\n",
       "      <th>Type_2</th>\n",
       "      <th>Total</th>\n",
       "      <th>HP</th>\n",
       "      <th>Attack</th>\n",
       "      <th>Defense</th>\n",
       "      <th>Sp_Atk</th>\n",
       "      <th>Sp_Def</th>\n",
       "      <th>Egg_Group_1</th>\n",
       "      <th>Egg_Group_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Bulbasaur</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Poison</td>\n",
       "      <td>318</td>\n",
       "      <td>45</td>\n",
       "      <td>49</td>\n",
       "      <td>49</td>\n",
       "      <td>65</td>\n",
       "      <td>65</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Grass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Ivysaur</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Poison</td>\n",
       "      <td>405</td>\n",
       "      <td>60</td>\n",
       "      <td>62</td>\n",
       "      <td>63</td>\n",
       "      <td>80</td>\n",
       "      <td>80</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Grass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Charmander</td>\n",
       "      <td>Fire</td>\n",
       "      <td>NaN</td>\n",
       "      <td>309</td>\n",
       "      <td>39</td>\n",
       "      <td>52</td>\n",
       "      <td>43</td>\n",
       "      <td>60</td>\n",
       "      <td>50</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Dragon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Charmeleon</td>\n",
       "      <td>Fire</td>\n",
       "      <td>NaN</td>\n",
       "      <td>405</td>\n",
       "      <td>58</td>\n",
       "      <td>64</td>\n",
       "      <td>58</td>\n",
       "      <td>80</td>\n",
       "      <td>65</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Dragon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Squirtle</td>\n",
       "      <td>Water</td>\n",
       "      <td>NaN</td>\n",
       "      <td>314</td>\n",
       "      <td>44</td>\n",
       "      <td>48</td>\n",
       "      <td>65</td>\n",
       "      <td>50</td>\n",
       "      <td>64</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Water_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>703</th>\n",
       "      <td>704</td>\n",
       "      <td>Goomy</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300</td>\n",
       "      <td>45</td>\n",
       "      <td>50</td>\n",
       "      <td>35</td>\n",
       "      <td>55</td>\n",
       "      <td>75</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>704</th>\n",
       "      <td>705</td>\n",
       "      <td>Sliggoo</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>NaN</td>\n",
       "      <td>452</td>\n",
       "      <td>68</td>\n",
       "      <td>75</td>\n",
       "      <td>53</td>\n",
       "      <td>83</td>\n",
       "      <td>113</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>707</th>\n",
       "      <td>708</td>\n",
       "      <td>Phantump</td>\n",
       "      <td>Ghost</td>\n",
       "      <td>Grass</td>\n",
       "      <td>309</td>\n",
       "      <td>43</td>\n",
       "      <td>70</td>\n",
       "      <td>48</td>\n",
       "      <td>50</td>\n",
       "      <td>60</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Amorphous</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>709</th>\n",
       "      <td>710</td>\n",
       "      <td>Pumpkaboo</td>\n",
       "      <td>Ghost</td>\n",
       "      <td>Grass</td>\n",
       "      <td>335</td>\n",
       "      <td>49</td>\n",
       "      <td>66</td>\n",
       "      <td>70</td>\n",
       "      <td>44</td>\n",
       "      <td>55</td>\n",
       "      <td>Amorphous</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>713</th>\n",
       "      <td>714</td>\n",
       "      <td>Noibat</td>\n",
       "      <td>Flying</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>245</td>\n",
       "      <td>40</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "      <td>45</td>\n",
       "      <td>40</td>\n",
       "      <td>Flying</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>237 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Number        Name  Type_1  Type_2  Total  HP  Attack  Defense  Sp_Atk  \\\n",
       "0         1   Bulbasaur   Grass  Poison    318  45      49       49      65   \n",
       "1         2     Ivysaur   Grass  Poison    405  60      62       63      80   \n",
       "3         4  Charmander    Fire     NaN    309  39      52       43      60   \n",
       "4         5  Charmeleon    Fire     NaN    405  58      64       58      80   \n",
       "6         7    Squirtle   Water     NaN    314  44      48       65      50   \n",
       "..      ...         ...     ...     ...    ...  ..     ...      ...     ...   \n",
       "703     704       Goomy  Dragon     NaN    300  45      50       35      55   \n",
       "704     705     Sliggoo  Dragon     NaN    452  68      75       53      83   \n",
       "707     708    Phantump   Ghost   Grass    309  43      70       48      50   \n",
       "709     710   Pumpkaboo   Ghost   Grass    335  49      66       70      44   \n",
       "713     714      Noibat  Flying  Dragon    245  40      30       35      45   \n",
       "\n",
       "     Sp_Def Egg_Group_1 Egg_Group_2  \n",
       "0        65     Monster       Grass  \n",
       "1        80     Monster       Grass  \n",
       "3        50     Monster      Dragon  \n",
       "4        65     Monster      Dragon  \n",
       "6        64     Monster     Water_1  \n",
       "..      ...         ...         ...  \n",
       "703      75      Dragon         NaN  \n",
       "704     113      Dragon         NaN  \n",
       "707      60       Grass   Amorphous  \n",
       "709      55   Amorphous         NaN  \n",
       "713      40      Flying         NaN  \n",
       "\n",
       "[237 rows x 12 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "below_mean = df[(df['HP'] < hp_mean) & (df['Attack'] < attack_mean) & (df['Defense'] < defense_mean)]\n",
    "below_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eb1a12e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T15:53:58.791500Z",
     "iopub.status.busy": "2024-04-13T15:53:58.790616Z",
     "iopub.status.idle": "2024-04-13T15:53:58.801650Z",
     "shell.execute_reply": "2024-04-13T15:53:58.800738Z"
    },
    "papermill": {
     "duration": 0.026862,
     "end_time": "2024-04-13T15:53:58.804398",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.777536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Total      525\n",
       "Name     Zubat\n",
       "dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_total_below_mean = below_mean[['Total','Name']].max()\n",
    "max_total_below_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bf1dfed",
   "metadata": {
    "papermill": {
     "duration": 0.008599,
     "end_time": "2024-04-13T15:53:58.821325",
     "exception": false,
     "start_time": "2024-04-13T15:53:58.812726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 635,
     "sourceId": 1677,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.536885,
   "end_time": "2024-04-13T15:53:59.453435",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-13T15:53:53.916550",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
