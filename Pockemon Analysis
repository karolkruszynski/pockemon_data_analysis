{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e58afa92",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:00.738873Z",
     "iopub.status.busy": "2024-04-13T16:32:00.738470Z",
     "iopub.status.idle": "2024-04-13T16:32:01.803131Z",
     "shell.execute_reply": "2024-04-13T16:32:01.801876Z"
    },
    "papermill": {
     "duration": 1.076327,
     "end_time": "2024-04-13T16:32:01.805571",
     "exception": false,
     "start_time": "2024-04-13T16:32:00.729244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/pokemon/report_Pokemon.pdf\n",
      "/kaggle/input/pokemon/pokemon_alopez247.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a6cb1353",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:01.823198Z",
     "iopub.status.busy": "2024-04-13T16:32:01.822016Z",
     "iopub.status.idle": "2024-04-13T16:32:01.850357Z",
     "shell.execute_reply": "2024-04-13T16:32:01.849264Z"
    },
    "papermill": {
     "duration": 0.040276,
     "end_time": "2024-04-13T16:32:01.853106",
     "exception": false,
     "start_time": "2024-04-13T16:32:01.812830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/pokemon/pokemon_alopez247.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4406361b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:01.869701Z",
     "iopub.status.busy": "2024-04-13T16:32:01.868991Z",
     "iopub.status.idle": "2024-04-13T16:32:01.882699Z",
     "shell.execute_reply": "2024-04-13T16:32:01.881422Z"
    },
    "papermill": {
     "duration": 0.024883,
     "end_time": "2024-04-13T16:32:01.885377",
     "exception": false,
     "start_time": "2024-04-13T16:32:01.860494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns_to_drop = ['Speed','Generation','isLegendary', 'Color', 'hasGender', 'Pr_Male', 'hasMegaEvolution','Height_m','Weight_kg','Catch_Rate','Body_Style']\n",
    "df.drop(axis=1, columns=columns_to_drop, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "132e4530",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:01.901494Z",
     "iopub.status.busy": "2024-04-13T16:32:01.901090Z",
     "iopub.status.idle": "2024-04-13T16:32:01.947588Z",
     "shell.execute_reply": "2024-04-13T16:32:01.946127Z"
    },
    "papermill": {
     "duration": 0.057681,
     "end_time": "2024-04-13T16:32:01.950537",
     "exception": false,
     "start_time": "2024-04-13T16:32:01.892856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number</th>\n",
       "      <th>Total</th>\n",
       "      <th>HP</th>\n",
       "      <th>Attack</th>\n",
       "      <th>Defense</th>\n",
       "      <th>Sp_Atk</th>\n",
       "      <th>Sp_Def</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>721.00000</td>\n",
       "      <td>721.000000</td>\n",
       "      <td>721.000000</td>\n",
       "      <td>721.000000</td>\n",
       "      <td>721.000000</td>\n",
       "      <td>721.000000</td>\n",
       "      <td>721.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>361.00000</td>\n",
       "      <td>417.945908</td>\n",
       "      <td>68.380028</td>\n",
       "      <td>75.013870</td>\n",
       "      <td>70.808599</td>\n",
       "      <td>68.737864</td>\n",
       "      <td>69.291262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>208.27906</td>\n",
       "      <td>109.663671</td>\n",
       "      <td>25.848272</td>\n",
       "      <td>28.984475</td>\n",
       "      <td>29.296558</td>\n",
       "      <td>28.788005</td>\n",
       "      <td>27.015860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.00000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>181.00000</td>\n",
       "      <td>320.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>53.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>361.00000</td>\n",
       "      <td>424.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>74.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>65.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>541.00000</td>\n",
       "      <td>499.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>85.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>85.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>721.00000</td>\n",
       "      <td>720.000000</td>\n",
       "      <td>255.000000</td>\n",
       "      <td>165.000000</td>\n",
       "      <td>230.000000</td>\n",
       "      <td>154.000000</td>\n",
       "      <td>230.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Number       Total          HP      Attack     Defense      Sp_Atk  \\\n",
       "count  721.00000  721.000000  721.000000  721.000000  721.000000  721.000000   \n",
       "mean   361.00000  417.945908   68.380028   75.013870   70.808599   68.737864   \n",
       "std    208.27906  109.663671   25.848272   28.984475   29.296558   28.788005   \n",
       "min      1.00000  180.000000    1.000000    5.000000    5.000000   10.000000   \n",
       "25%    181.00000  320.000000   50.000000   53.000000   50.000000   45.000000   \n",
       "50%    361.00000  424.000000   65.000000   74.000000   65.000000   65.000000   \n",
       "75%    541.00000  499.000000   80.000000   95.000000   85.000000   90.000000   \n",
       "max    721.00000  720.000000  255.000000  165.000000  230.000000  154.000000   \n",
       "\n",
       "           Sp_Def  \n",
       "count  721.000000  \n",
       "mean    69.291262  \n",
       "std     27.015860  \n",
       "min     20.000000  \n",
       "25%     50.000000  \n",
       "50%     65.000000  \n",
       "75%     85.000000  \n",
       "max    230.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a4d78d71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:01.967489Z",
     "iopub.status.busy": "2024-04-13T16:32:01.967044Z",
     "iopub.status.idle": "2024-04-13T16:32:01.990233Z",
     "shell.execute_reply": "2024-04-13T16:32:01.988827Z"
    },
    "papermill": {
     "duration": 0.034534,
     "end_time": "2024-04-13T16:32:01.992871",
     "exception": false,
     "start_time": "2024-04-13T16:32:01.958337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 721 entries, 0 to 720\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype \n",
      "---  ------       --------------  ----- \n",
      " 0   Number       721 non-null    int64 \n",
      " 1   Name         721 non-null    object\n",
      " 2   Type_1       721 non-null    object\n",
      " 3   Type_2       350 non-null    object\n",
      " 4   Total        721 non-null    int64 \n",
      " 5   HP           721 non-null    int64 \n",
      " 6   Attack       721 non-null    int64 \n",
      " 7   Defense      721 non-null    int64 \n",
      " 8   Sp_Atk       721 non-null    int64 \n",
      " 9   Sp_Def       721 non-null    int64 \n",
      " 10  Egg_Group_1  721 non-null    object\n",
      " 11  Egg_Group_2  191 non-null    object\n",
      "dtypes: int64(7), object(5)\n",
      "memory usage: 67.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "080f31e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.010351Z",
     "iopub.status.busy": "2024-04-13T16:32:02.009947Z",
     "iopub.status.idle": "2024-04-13T16:32:02.019746Z",
     "shell.execute_reply": "2024-04-13T16:32:02.018490Z"
    },
    "papermill": {
     "duration": 0.021558,
     "end_time": "2024-04-13T16:32:02.022307",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.000749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Number           0\n",
       "Name             0\n",
       "Type_1           0\n",
       "Type_2         371\n",
       "Total            0\n",
       "HP               0\n",
       "Attack           0\n",
       "Defense          0\n",
       "Sp_Atk           0\n",
       "Sp_Def           0\n",
       "Egg_Group_1      0\n",
       "Egg_Group_2    530\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4a41e24a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.040294Z",
     "iopub.status.busy": "2024-04-13T16:32:02.039877Z",
     "iopub.status.idle": "2024-04-13T16:32:02.047713Z",
     "shell.execute_reply": "2024-04-13T16:32:02.046719Z"
    },
    "papermill": {
     "duration": 0.018806,
     "end_time": "2024-04-13T16:32:02.049881",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.031075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "68.38002773925103"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hp_mean = df['HP'].mean()\n",
    "hp_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dd8a42b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.068119Z",
     "iopub.status.busy": "2024-04-13T16:32:02.067682Z",
     "iopub.status.idle": "2024-04-13T16:32:02.075640Z",
     "shell.execute_reply": "2024-04-13T16:32:02.074414Z"
    },
    "papermill": {
     "duration": 0.01982,
     "end_time": "2024-04-13T16:32:02.077874",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.058054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "75.01386962552012"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "attack_mean = df['Attack'].mean()\n",
    "attack_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c3c52f72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.095524Z",
     "iopub.status.busy": "2024-04-13T16:32:02.095147Z",
     "iopub.status.idle": "2024-04-13T16:32:02.101770Z",
     "shell.execute_reply": "2024-04-13T16:32:02.100642Z"
    },
    "papermill": {
     "duration": 0.018612,
     "end_time": "2024-04-13T16:32:02.104339",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.085727",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "70.80859916782246"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "defense_mean = df['Defense'].mean()\n",
    "defense_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "db67ffb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.122789Z",
     "iopub.status.busy": "2024-04-13T16:32:02.122383Z",
     "iopub.status.idle": "2024-04-13T16:32:02.130303Z",
     "shell.execute_reply": "2024-04-13T16:32:02.129041Z"
    },
    "papermill": {
     "duration": 0.019958,
     "end_time": "2024-04-13T16:32:02.133025",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.113067",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "417.94590846047157"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_mean = df['Total'].mean()\n",
    "total_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "12e78328",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.151803Z",
     "iopub.status.busy": "2024-04-13T16:32:02.151384Z",
     "iopub.status.idle": "2024-04-13T16:32:02.173246Z",
     "shell.execute_reply": "2024-04-13T16:32:02.172031Z"
    },
    "papermill": {
     "duration": 0.033956,
     "end_time": "2024-04-13T16:32:02.175918",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.141962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number</th>\n",
       "      <th>Name</th>\n",
       "      <th>Type_1</th>\n",
       "      <th>Type_2</th>\n",
       "      <th>Total</th>\n",
       "      <th>HP</th>\n",
       "      <th>Attack</th>\n",
       "      <th>Defense</th>\n",
       "      <th>Sp_Atk</th>\n",
       "      <th>Sp_Def</th>\n",
       "      <th>Egg_Group_1</th>\n",
       "      <th>Egg_Group_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Venusaur</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Poison</td>\n",
       "      <td>525</td>\n",
       "      <td>80</td>\n",
       "      <td>82</td>\n",
       "      <td>83</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Grass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Charizard</td>\n",
       "      <td>Fire</td>\n",
       "      <td>Flying</td>\n",
       "      <td>534</td>\n",
       "      <td>78</td>\n",
       "      <td>84</td>\n",
       "      <td>78</td>\n",
       "      <td>109</td>\n",
       "      <td>85</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Dragon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>Blastoise</td>\n",
       "      <td>Water</td>\n",
       "      <td>NaN</td>\n",
       "      <td>530</td>\n",
       "      <td>79</td>\n",
       "      <td>83</td>\n",
       "      <td>100</td>\n",
       "      <td>85</td>\n",
       "      <td>105</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Water_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>Pidgeot</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Flying</td>\n",
       "      <td>479</td>\n",
       "      <td>83</td>\n",
       "      <td>80</td>\n",
       "      <td>75</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>Flying</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>Sandslash</td>\n",
       "      <td>Ground</td>\n",
       "      <td>NaN</td>\n",
       "      <td>450</td>\n",
       "      <td>75</td>\n",
       "      <td>100</td>\n",
       "      <td>110</td>\n",
       "      <td>45</td>\n",
       "      <td>55</td>\n",
       "      <td>Field</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>712</th>\n",
       "      <td>713</td>\n",
       "      <td>Avalugg</td>\n",
       "      <td>Ice</td>\n",
       "      <td>NaN</td>\n",
       "      <td>514</td>\n",
       "      <td>95</td>\n",
       "      <td>117</td>\n",
       "      <td>184</td>\n",
       "      <td>44</td>\n",
       "      <td>46</td>\n",
       "      <td>Monster</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>715</th>\n",
       "      <td>716</td>\n",
       "      <td>Xerneas</td>\n",
       "      <td>Fairy</td>\n",
       "      <td>NaN</td>\n",
       "      <td>680</td>\n",
       "      <td>126</td>\n",
       "      <td>131</td>\n",
       "      <td>95</td>\n",
       "      <td>131</td>\n",
       "      <td>98</td>\n",
       "      <td>Undiscovered</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>716</th>\n",
       "      <td>717</td>\n",
       "      <td>Yveltal</td>\n",
       "      <td>Dark</td>\n",
       "      <td>Flying</td>\n",
       "      <td>680</td>\n",
       "      <td>126</td>\n",
       "      <td>131</td>\n",
       "      <td>95</td>\n",
       "      <td>131</td>\n",
       "      <td>98</td>\n",
       "      <td>Undiscovered</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>717</th>\n",
       "      <td>718</td>\n",
       "      <td>Zygarde</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>Ground</td>\n",
       "      <td>600</td>\n",
       "      <td>108</td>\n",
       "      <td>100</td>\n",
       "      <td>121</td>\n",
       "      <td>81</td>\n",
       "      <td>95</td>\n",
       "      <td>Undiscovered</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>720</th>\n",
       "      <td>721</td>\n",
       "      <td>Volcanion</td>\n",
       "      <td>Fire</td>\n",
       "      <td>Water</td>\n",
       "      <td>600</td>\n",
       "      <td>80</td>\n",
       "      <td>110</td>\n",
       "      <td>120</td>\n",
       "      <td>130</td>\n",
       "      <td>90</td>\n",
       "      <td>Undiscovered</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>155 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Number       Name  Type_1  Type_2  Total   HP  Attack  Defense  Sp_Atk  \\\n",
       "2         3   Venusaur   Grass  Poison    525   80      82       83     100   \n",
       "5         6  Charizard    Fire  Flying    534   78      84       78     109   \n",
       "8         9  Blastoise   Water     NaN    530   79      83      100      85   \n",
       "17       18    Pidgeot  Normal  Flying    479   83      80       75      70   \n",
       "27       28  Sandslash  Ground     NaN    450   75     100      110      45   \n",
       "..      ...        ...     ...     ...    ...  ...     ...      ...     ...   \n",
       "712     713    Avalugg     Ice     NaN    514   95     117      184      44   \n",
       "715     716    Xerneas   Fairy     NaN    680  126     131       95     131   \n",
       "716     717    Yveltal    Dark  Flying    680  126     131       95     131   \n",
       "717     718    Zygarde  Dragon  Ground    600  108     100      121      81   \n",
       "720     721  Volcanion    Fire   Water    600   80     110      120     130   \n",
       "\n",
       "     Sp_Def   Egg_Group_1 Egg_Group_2  \n",
       "2       100       Monster       Grass  \n",
       "5        85       Monster      Dragon  \n",
       "8       105       Monster     Water_1  \n",
       "17       70        Flying         NaN  \n",
       "27       55         Field         NaN  \n",
       "..      ...           ...         ...  \n",
       "712      46       Monster         NaN  \n",
       "715      98  Undiscovered         NaN  \n",
       "716      98  Undiscovered         NaN  \n",
       "717      95  Undiscovered         NaN  \n",
       "720      90  Undiscovered         NaN  \n",
       "\n",
       "[155 rows x 12 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "above_mean = df[(df['HP'] > hp_mean) & (df['Attack'] > attack_mean) & (df['Defense'] > defense_mean)]\n",
    "above_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7a01cb72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.194927Z",
     "iopub.status.busy": "2024-04-13T16:32:02.194515Z",
     "iopub.status.idle": "2024-04-13T16:32:02.205006Z",
     "shell.execute_reply": "2024-04-13T16:32:02.203776Z"
    },
    "papermill": {
     "duration": 0.02259,
     "end_time": "2024-04-13T16:32:02.207314",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.184724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Total        720\n",
       "Name     Zygarde\n",
       "dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_total_above_mean = above_mean[['Total','Name']].max()\n",
    "max_total_above_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a0563ccd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.228178Z",
     "iopub.status.busy": "2024-04-13T16:32:02.227593Z",
     "iopub.status.idle": "2024-04-13T16:32:02.246626Z",
     "shell.execute_reply": "2024-04-13T16:32:02.245418Z"
    },
    "papermill": {
     "duration": 0.032394,
     "end_time": "2024-04-13T16:32:02.249024",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.216630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number</th>\n",
       "      <th>Name</th>\n",
       "      <th>Type_1</th>\n",
       "      <th>Type_2</th>\n",
       "      <th>Total</th>\n",
       "      <th>HP</th>\n",
       "      <th>Attack</th>\n",
       "      <th>Defense</th>\n",
       "      <th>Sp_Atk</th>\n",
       "      <th>Sp_Def</th>\n",
       "      <th>Egg_Group_1</th>\n",
       "      <th>Egg_Group_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Bulbasaur</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Poison</td>\n",
       "      <td>318</td>\n",
       "      <td>45</td>\n",
       "      <td>49</td>\n",
       "      <td>49</td>\n",
       "      <td>65</td>\n",
       "      <td>65</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Grass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Ivysaur</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Poison</td>\n",
       "      <td>405</td>\n",
       "      <td>60</td>\n",
       "      <td>62</td>\n",
       "      <td>63</td>\n",
       "      <td>80</td>\n",
       "      <td>80</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Grass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Charmander</td>\n",
       "      <td>Fire</td>\n",
       "      <td>NaN</td>\n",
       "      <td>309</td>\n",
       "      <td>39</td>\n",
       "      <td>52</td>\n",
       "      <td>43</td>\n",
       "      <td>60</td>\n",
       "      <td>50</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Dragon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Charmeleon</td>\n",
       "      <td>Fire</td>\n",
       "      <td>NaN</td>\n",
       "      <td>405</td>\n",
       "      <td>58</td>\n",
       "      <td>64</td>\n",
       "      <td>58</td>\n",
       "      <td>80</td>\n",
       "      <td>65</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Dragon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Squirtle</td>\n",
       "      <td>Water</td>\n",
       "      <td>NaN</td>\n",
       "      <td>314</td>\n",
       "      <td>44</td>\n",
       "      <td>48</td>\n",
       "      <td>65</td>\n",
       "      <td>50</td>\n",
       "      <td>64</td>\n",
       "      <td>Monster</td>\n",
       "      <td>Water_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>703</th>\n",
       "      <td>704</td>\n",
       "      <td>Goomy</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300</td>\n",
       "      <td>45</td>\n",
       "      <td>50</td>\n",
       "      <td>35</td>\n",
       "      <td>55</td>\n",
       "      <td>75</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>704</th>\n",
       "      <td>705</td>\n",
       "      <td>Sliggoo</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>NaN</td>\n",
       "      <td>452</td>\n",
       "      <td>68</td>\n",
       "      <td>75</td>\n",
       "      <td>53</td>\n",
       "      <td>83</td>\n",
       "      <td>113</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>707</th>\n",
       "      <td>708</td>\n",
       "      <td>Phantump</td>\n",
       "      <td>Ghost</td>\n",
       "      <td>Grass</td>\n",
       "      <td>309</td>\n",
       "      <td>43</td>\n",
       "      <td>70</td>\n",
       "      <td>48</td>\n",
       "      <td>50</td>\n",
       "      <td>60</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Amorphous</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>709</th>\n",
       "      <td>710</td>\n",
       "      <td>Pumpkaboo</td>\n",
       "      <td>Ghost</td>\n",
       "      <td>Grass</td>\n",
       "      <td>335</td>\n",
       "      <td>49</td>\n",
       "      <td>66</td>\n",
       "      <td>70</td>\n",
       "      <td>44</td>\n",
       "      <td>55</td>\n",
       "      <td>Amorphous</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>713</th>\n",
       "      <td>714</td>\n",
       "      <td>Noibat</td>\n",
       "      <td>Flying</td>\n",
       "      <td>Dragon</td>\n",
       "      <td>245</td>\n",
       "      <td>40</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "      <td>45</td>\n",
       "      <td>40</td>\n",
       "      <td>Flying</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>237 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Number        Name  Type_1  Type_2  Total  HP  Attack  Defense  Sp_Atk  \\\n",
       "0         1   Bulbasaur   Grass  Poison    318  45      49       49      65   \n",
       "1         2     Ivysaur   Grass  Poison    405  60      62       63      80   \n",
       "3         4  Charmander    Fire     NaN    309  39      52       43      60   \n",
       "4         5  Charmeleon    Fire     NaN    405  58      64       58      80   \n",
       "6         7    Squirtle   Water     NaN    314  44      48       65      50   \n",
       "..      ...         ...     ...     ...    ...  ..     ...      ...     ...   \n",
       "703     704       Goomy  Dragon     NaN    300  45      50       35      55   \n",
       "704     705     Sliggoo  Dragon     NaN    452  68      75       53      83   \n",
       "707     708    Phantump   Ghost   Grass    309  43      70       48      50   \n",
       "709     710   Pumpkaboo   Ghost   Grass    335  49      66       70      44   \n",
       "713     714      Noibat  Flying  Dragon    245  40      30       35      45   \n",
       "\n",
       "     Sp_Def Egg_Group_1 Egg_Group_2  \n",
       "0        65     Monster       Grass  \n",
       "1        80     Monster       Grass  \n",
       "3        50     Monster      Dragon  \n",
       "4        65     Monster      Dragon  \n",
       "6        64     Monster     Water_1  \n",
       "..      ...         ...         ...  \n",
       "703      75      Dragon         NaN  \n",
       "704     113      Dragon         NaN  \n",
       "707      60       Grass   Amorphous  \n",
       "709      55   Amorphous         NaN  \n",
       "713      40      Flying         NaN  \n",
       "\n",
       "[237 rows x 12 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "below_mean = df[(df['HP'] < hp_mean) & (df['Attack'] < attack_mean) & (df['Defense'] < defense_mean)]\n",
    "below_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7a3eb2a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.268666Z",
     "iopub.status.busy": "2024-04-13T16:32:02.268232Z",
     "iopub.status.idle": "2024-04-13T16:32:02.280788Z",
     "shell.execute_reply": "2024-04-13T16:32:02.279192Z"
    },
    "papermill": {
     "duration": 0.026357,
     "end_time": "2024-04-13T16:32:02.284284",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.257927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Total      525\n",
       "Name     Zubat\n",
       "dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_total_below_mean = below_mean[['Total','Name']].max()\n",
    "max_total_below_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b4198733",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.304852Z",
     "iopub.status.busy": "2024-04-13T16:32:02.304420Z",
     "iopub.status.idle": "2024-04-13T16:32:02.311114Z",
     "shell.execute_reply": "2024-04-13T16:32:02.309273Z"
    },
    "papermill": {
     "duration": 0.021137,
     "end_time": "2024-04-13T16:32:02.314664",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.293527",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def pockemon_battle(first_pockemon, second_pockemon):\n",
    "    if df[df['Name'] == first_pockemon]['Total'].values[0] > df[df['Name'] == second_pockemon]['Total'].values[0]:\n",
    "        print(first_pockemon + ' wins')\n",
    "    else:\n",
    "        print(second_pockemon + ' wins')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b3688140",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.336288Z",
     "iopub.status.busy": "2024-04-13T16:32:02.335181Z",
     "iopub.status.idle": "2024-04-13T16:32:02.343543Z",
     "shell.execute_reply": "2024-04-13T16:32:02.342028Z"
    },
    "papermill": {
     "duration": 0.022886,
     "end_time": "2024-04-13T16:32:02.347035",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.324149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Venusaur wins\n"
     ]
    }
   ],
   "source": [
    "pockemon_battle('Venusaur', 'Bulbasaur')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0bf7cfce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.366607Z",
     "iopub.status.busy": "2024-04-13T16:32:02.366019Z",
     "iopub.status.idle": "2024-04-13T16:32:02.371730Z",
     "shell.execute_reply": "2024-04-13T16:32:02.370881Z"
    },
    "papermill": {
     "duration": 0.018226,
     "end_time": "2024-04-13T16:32:02.374105",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.355879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_pockemon_total(name):\n",
    "    return df[df['Name'] == name]['Total'].values[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "41620253",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.393773Z",
     "iopub.status.busy": "2024-04-13T16:32:02.393385Z",
     "iopub.status.idle": "2024-04-13T16:32:02.401321Z",
     "shell.execute_reply": "2024-04-13T16:32:02.400278Z"
    },
    "papermill": {
     "duration": 0.020286,
     "end_time": "2024-04-13T16:32:02.403494",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.383208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "525"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_pockemon_total('Venusaur')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "66b40eb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.424240Z",
     "iopub.status.busy": "2024-04-13T16:32:02.423597Z",
     "iopub.status.idle": "2024-04-13T16:32:02.430680Z",
     "shell.execute_reply": "2024-04-13T16:32:02.429614Z"
    },
    "papermill": {
     "duration": 0.020774,
     "end_time": "2024-04-13T16:32:02.433193",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.412419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Grass', 'Fire', 'Water', 'Bug', 'Normal', 'Poison', 'Electric',\n",
       "       'Ground', 'Fairy', 'Fighting', 'Psychic', 'Rock', 'Ghost', 'Ice',\n",
       "       'Dragon', 'Dark', 'Steel', 'Flying'], dtype=object)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pockemon_types = df['Type_1'].unique()\n",
    "pockemon_types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0d3157ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.454578Z",
     "iopub.status.busy": "2024-04-13T16:32:02.453972Z",
     "iopub.status.idle": "2024-04-13T16:32:02.471950Z",
     "shell.execute_reply": "2024-04-13T16:32:02.470662Z"
    },
    "papermill": {
     "duration": 0.031582,
     "end_time": "2024-04-13T16:32:02.474451",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.442869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Grass': 409.56060606060606,\n",
       " 'Fire': 443.02127659574467,\n",
       " 'Water': 417.2,\n",
       " 'Bug': 365.12698412698415,\n",
       " 'Normal': 392.16129032258067,\n",
       " 'Poison': 399.14285714285717,\n",
       " 'Electric': 420.69444444444446,\n",
       " 'Ground': 421.0,\n",
       " 'Fairy': 413.1764705882353,\n",
       " 'Fighting': 404.36,\n",
       " 'Psychic': 442.48936170212767,\n",
       " 'Rock': 437.8048780487805,\n",
       " 'Ghost': 423.6521739130435,\n",
       " 'Ice': 427.0869565217391,\n",
       " 'Dragon': 501.9583333333333,\n",
       " 'Dark': 434.75,\n",
       " 'Steel': 464.90909090909093,\n",
       " 'Flying': 453.3333333333333}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pockemon_types_total_mean = {}\n",
    "for pockemon_type in pockemon_types:\n",
    "    pockemon_types_total_mean[pockemon_type] = df[df['Type_1'] == pockemon_type]['Total'].mean()\n",
    "pockemon_types_total_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e251845c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.495575Z",
     "iopub.status.busy": "2024-04-13T16:32:02.495171Z",
     "iopub.status.idle": "2024-04-13T16:32:02.517697Z",
     "shell.execute_reply": "2024-04-13T16:32:02.516260Z"
    },
    "papermill": {
     "duration": 0.036397,
     "end_time": "2024-04-13T16:32:02.520397",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.484000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Grass': 600,\n",
       " 'Fire': 680,\n",
       " 'Water': 680,\n",
       " 'Bug': 600,\n",
       " 'Normal': 720,\n",
       " 'Poison': 535,\n",
       " 'Electric': 580,\n",
       " 'Ground': 670,\n",
       " 'Fairy': 680,\n",
       " 'Fighting': 525,\n",
       " 'Psychic': 680,\n",
       " 'Rock': 600,\n",
       " 'Ghost': 680,\n",
       " 'Ice': 580,\n",
       " 'Dragon': 680,\n",
       " 'Dark': 680,\n",
       " 'Steel': 680,\n",
       " 'Flying': 580}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pockemon_types_max_total = {}\n",
    "for pockemon_type in pockemon_types:\n",
    "    pockemon_types_max_total[pockemon_type] = df[df['Type_1'] == pockemon_type]['Total'].max()\n",
    "pockemon_types_max_total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "df616308",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.542648Z",
     "iopub.status.busy": "2024-04-13T16:32:02.541607Z",
     "iopub.status.idle": "2024-04-13T16:32:02.550194Z",
     "shell.execute_reply": "2024-04-13T16:32:02.549137Z"
    },
    "papermill": {
     "duration": 0.021839,
     "end_time": "2024-04-13T16:32:02.552249",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.530410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Fighting', 525),\n",
       " ('Poison', 535),\n",
       " ('Electric', 580),\n",
       " ('Ice', 580),\n",
       " ('Flying', 580),\n",
       " ('Grass', 600),\n",
       " ('Bug', 600),\n",
       " ('Rock', 600),\n",
       " ('Ground', 670),\n",
       " ('Fire', 680),\n",
       " ('Water', 680),\n",
       " ('Fairy', 680),\n",
       " ('Psychic', 680),\n",
       " ('Ghost', 680),\n",
       " ('Dragon', 680),\n",
       " ('Dark', 680),\n",
       " ('Steel', 680),\n",
       " ('Normal', 720)]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_dict_values = sorted(pockemon_types_max_total.items(), key=lambda x: x[1])  # Sortowanie po wartościach\n",
    "sorted_dict_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9186713c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.572937Z",
     "iopub.status.busy": "2024-04-13T16:32:02.572536Z",
     "iopub.status.idle": "2024-04-13T16:32:02.577659Z",
     "shell.execute_reply": "2024-04-13T16:32:02.576432Z"
    },
    "papermill": {
     "duration": 0.018179,
     "end_time": "2024-04-13T16:32:02.579910",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.561731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "types = [x[0] for x in sorted_dict_values]\n",
    "stats = [x[1] for x in sorted_dict_values]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6487934d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:02.602444Z",
     "iopub.status.busy": "2024-04-13T16:32:02.601790Z",
     "iopub.status.idle": "2024-04-13T16:32:03.085063Z",
     "shell.execute_reply": "2024-04-13T16:32:03.083294Z"
    },
    "papermill": {
     "duration": 0.498091,
     "end_time": "2024-04-13T16:32:03.087583",
     "exception": false,
     "start_time": "2024-04-13T16:32:02.589492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Tworzenie wykresu\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(types, stats, color='skyblue')\n",
    "\n",
    "# Dodanie etykiet i tytułu\n",
    "plt.xlabel('Typy Pokémonów')\n",
    "plt.ylabel('Bazowe Statystyki')\n",
    "plt.title('Bazowe Statystyki Pokémonów według Typu')\n",
    "\n",
    "# Obrót etykiet osi x dla lepszej czytelności\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "\n",
    "# Wyświetlenie wykresu\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2d7843a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:03.112869Z",
     "iopub.status.busy": "2024-04-13T16:32:03.112433Z",
     "iopub.status.idle": "2024-04-13T16:32:03.520375Z",
     "shell.execute_reply": "2024-04-13T16:32:03.519157Z"
    },
    "papermill": {
     "duration": 0.425407,
     "end_time": "2024-04-13T16:32:03.523584",
     "exception": false,
     "start_time": "2024-04-13T16:32:03.098177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pockemon_types_mean_total_plot = pd.DataFrame.from_dict(pockemon_types_total_mean, orient='index')\n",
    "pockemon_types_mean_total_plot.plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ac81766d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:03.550802Z",
     "iopub.status.busy": "2024-04-13T16:32:03.550355Z",
     "iopub.status.idle": "2024-04-13T16:32:03.980577Z",
     "shell.execute_reply": "2024-04-13T16:32:03.979098Z"
    },
    "papermill": {
     "duration": 0.446472,
     "end_time": "2024-04-13T16:32:03.983094",
     "exception": false,
     "start_time": "2024-04-13T16:32:03.536622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pockemon_types_max_total_plot = pd.DataFrame.from_dict(pockemon_types_max_total, orient='index')\n",
    "pockemon_types_max_total_plot.plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8bf81fac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:04.011184Z",
     "iopub.status.busy": "2024-04-13T16:32:04.010472Z",
     "iopub.status.idle": "2024-04-13T16:32:04.016778Z",
     "shell.execute_reply": "2024-04-13T16:32:04.014995Z"
    },
    "papermill": {
     "duration": 0.022579,
     "end_time": "2024-04-13T16:32:04.019666",
     "exception": false,
     "start_time": "2024-04-13T16:32:03.997087",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def is_your_pockemon_above_mean(name):\n",
    "    if df[df['Name'] == name]['Total'].values[0] > total_mean:\n",
    "        return True\n",
    "    else:\n",
    "        return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8d6f0bf9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-13T16:32:04.045875Z",
     "iopub.status.busy": "2024-04-13T16:32:04.044917Z",
     "iopub.status.idle": "2024-04-13T16:32:04.052574Z",
     "shell.execute_reply": "2024-04-13T16:32:04.051322Z"
    },
    "papermill": {
     "duration": 0.023689,
     "end_time": "2024-04-13T16:32:04.055194",
     "exception": false,
     "start_time": "2024-04-13T16:32:04.031505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_your_pockemon_above_mean('Venusaur')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b2e5c7a",
   "metadata": {
    "papermill": {
     "duration": 0.012522,
     "end_time": "2024-04-13T16:32:04.080419",
     "exception": false,
     "start_time": "2024-04-13T16:32:04.067897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 635,
     "sourceId": 1677,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.117961,
   "end_time": "2024-04-13T16:32:04.716245",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-13T16:31:57.598284",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
